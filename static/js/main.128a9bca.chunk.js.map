{"version":3,"sources":["serviceWorker.js","components/Card.jsx","components/ControlInterface.jsx","components/TopBar.jsx","components/CardSet.jsx","assets/static/robots.js","main/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Card","className","src","this","props","name","alt","email","Component","ControlInterface","state","handleChange","bind","ReactDOM","render","key","document","getElementById","event","s","target","value","setState","for","type","placeholder","onChange","e","onClick","insertTest","React","TopBar","href","Cards","cards","robots","map","r","id","App","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.128a9bca.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport './Card.css'\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className='card bg-dark-gray dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img src={ `https://robohash.org/${ this.props.name }?200x200` } alt=\"robot\"/>\r\n        <div className='light-gray card-info'>\r\n          <h2>{ this.props.name }</h2>\r\n          <p>{ this.props.email }</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nimport ReactDOM from 'react-dom';\r\nimport './ControlInterface.css';\r\n\r\nclass ControlInterface extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { name: '', email: '' };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  insertTest() {\r\n    ReactDOM.render(\r\n      <Card key='0' name={ this.state.name || ' ' } email={ this.state.email } />,\r\n      document.getElementById('card-set')\r\n    )\r\n  };\r\n\r\n  handleChange(event) {\r\n    const s = { ...this.state };\r\n    s[event.target.name] = event.target.value;\r\n    this.setState(s);\r\n    // console.log(s[event.target.name], this.state)\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"control\">\r\n        <h3 className=\"tc\">Create your own Robotfriend:</h3>\r\n        <div className=\"form-row flex flex-wrap justify-center mt3\">\r\n          <div className=\"form-group\">\r\n            <label for=\"name\">Name</label>\r\n            <input type=\"text\" placeholder=\"Enter de robot's name...\" name=\"name\"\r\n              value={ this.state.name } onChange={ e => this.handleChange(e) } />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label for=\"email\">E-mail</label>\r\n            <input type=\"text\" placeholder=\"Enter the robot's e-mail...\" name=\"email\"\r\n              value={ this.state.email } onChange={ e => this.handleChange(e) } />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"form-buttons\" className=\"tc mt2 mb2\">\r\n          <button className=\"button white bg-black\" onClick={ e => this.insertTest(e) }>Generate</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default ControlInterface;","import React, { Fragment } from 'react';\r\nimport ControlInterface from './ControlInterface';\r\nimport './TopBar.css';\r\n\r\nfunction TopBar(props) {\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"page-title bg-dark-gray tc pa4 ma0\">\r\n        <a href=\"/\" className=\"light-gray title-link\">Robotfriends</a>\r\n      </h1>\r\n      <ControlInterface />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default TopBar;","import React from 'react';\r\nimport Card from './Card';\r\nimport './CardSet.css';\r\n\r\nfunction Cards(props) {\r\n  const cards = props.robots.map(r => {\r\n    return <Card key={ r.id } name={ r.name } email={ r.email } />\r\n  });\r\nreturn <div id='card-set'>\r\n    { cards }\r\n  </div>;\r\n};\r\n\r\nexport default Cards;","export default [\r\n  {\r\n    id: 1,\r\n    name: 'Claudine Pratt',\r\n    email: 'claudine@home.com'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Naomi Medina',\r\n    email: 'naomi@home.com'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Gilberto Clark',\r\n    email: 'gilberto@home.com'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Hester Burns',\r\n    email: 'hester@home.com'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Ulysses Tucker',\r\n    email: 'ulysses@home.com'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'May Watkins',\r\n    email: 'may@home.com'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Odell Villegas',\r\n    email: 'odell@home.com'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Hosea Gibbs',\r\n    email: 'hosea@home.com'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Lindsey Delgado',\r\n    email: 'lindsay@home.com'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Lazaro Cannon',\r\n    email: 'lazaro@home.com'\r\n  },\r\n  {\r\n    id: 11,\r\n    name: 'Dee Lawrence',\r\n    email: 'dee@home.com'\r\n  },\r\n  {\r\n    id: 12,\r\n    name: 'Carey Hogan',\r\n    email: 'carey@home.com'\r\n  },\r\n  {\r\n    id: 13,\r\n    name: 'Belinda Glass',\r\n    email: 'belinda@home.com'\r\n  },\r\n  {\r\n    id: 14,\r\n    name: 'Catalina Webster',\r\n    email: 'catalina@home.com'\r\n  },\r\n  {\r\n    id: 15,\r\n    name: 'Hans Werner',\r\n    email: 'hans@home.com'\r\n  },\r\n  {\r\n    id: 16,\r\n    name: 'Noel Zhang',\r\n    email: 'noel@home.com'\r\n  },\r\n  {\r\n    id: 17,\r\n    name: 'Stacy Paul',\r\n    email: 'stacy@home.com'\r\n  },\r\n  {\r\n    id: 18,\r\n    name: 'Marco Newton',\r\n    email: 'marco@home.com'\r\n  },\r\n  {\r\n    id: 19,\r\n    name: 'Allan Finley',\r\n    email: 'allan@home.com'\r\n  },\r\n  {\r\n    id: 20,\r\n    name: 'Shawna Mclaughlin',\r\n    email: 'shawna@home.com'\r\n  },\r\n  {\r\n    id: 21,\r\n    name: 'Johnny Malone',\r\n    email: 'johnny@home.com'\r\n  },\r\n  {\r\n    id: 22,\r\n    name: 'Delores Crawford',\r\n    email: 'delores@home.com'\r\n  },\r\n  {\r\n    id: 23,\r\n    name: 'Shelly Ramsey',\r\n    email: 'shelly@home.com'\r\n  },\r\n  {\r\n    id: 24,\r\n    name: 'Nelson Holt',\r\n    email: 'nelson@home.com'\r\n  },\r\n  {\r\n    id: 25,\r\n    name: 'Jamison Key',\r\n    email: 'jamison@home.com'\r\n  },\r\n  {\r\n    id: 26,\r\n    name: 'Malcom Duarte',\r\n    email: 'malcom@home.com'\r\n  },\r\n  {\r\n    id: 27,\r\n    name: 'Herbert Simon',\r\n    email: 'heberts@home.com'\r\n  },\r\n  {\r\n    id: 28,\r\n    name: 'Mabel Good',\r\n    email: 'mabel@home.com'\r\n  },\r\n  {\r\n    id: 29,\r\n    name: 'Karin Osborne',\r\n    email: 'karin@home.com'\r\n  },\r\n  {\r\n    id: 30,\r\n    name: 'Billy Avery',\r\n    email: 'billy@home.com'\r\n  },\r\n  {\r\n    id: 31,\r\n    name: 'Rupert Hunter',\r\n    email: 'rupert@home.com'\r\n  },\r\n  {\r\n    id: 32,\r\n    name: 'Geoffrey Hamilton',\r\n    email: 'geoffrey@home.com'\r\n  },\r\n  {\r\n    id: 33,\r\n    name: 'Toolongnamefortestpurposesonly',\r\n    email: 'Toolongnamefortestpurposesonly@home.com'\r\n  },\r\n  {\r\n    id: 34,\r\n    name: ' ',\r\n    email: '(intentionally nameless)',\r\n  },\r\n  {\r\n    id: 35,\r\n    name: '-',\r\n    email: '-',\r\n  }\r\n]","import React, { Fragment } from 'react';\r\nimport TopBar from '../components/TopBar';\r\nimport CardSet from '../components/CardSet';\r\nimport robots from '../assets/static/robots';\r\n\r\nfunction App(props) {\r\n  return (\r\n    <Fragment>\r\n      <TopBar />\r\n      <CardSet robots={ robots } />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './main/App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}