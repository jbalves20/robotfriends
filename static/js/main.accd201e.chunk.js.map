{"version":3,"sources":["serviceWorker.js","Card.jsx","Cards.jsx","index.js","robots.js"],"names":["Boolean","window","location","hostname","match","Card","className","src","this","props","name","alt","email","Component","Cards","cards","items","map","c","key","id","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCDSC,G,6KAZX,OACE,yBAAKC,UAAU,0DACb,yBAAKC,IAAG,+BAA4BC,KAAKC,MAAMC,KAAvC,YAAyDC,IAAI,UACrE,yBAAKL,UAAU,aACb,4BAAME,KAAKC,MAAMC,MACjB,2BAAKF,KAAKC,MAAMG,a,GAPPC,cCOJC,MAPf,SAAeL,GACb,IAAMM,EAAQN,EAAMO,MAAMC,KAAI,SAAAC,GAC5B,OAAO,kBAAC,EAAD,CAAMC,IAAMD,EAAEE,GAAKV,KAAOQ,EAAER,KAAOE,MAAQM,EAAEN,WAExD,OAAO,6BAAOG,ICCdM,IAASC,OACP,kBAAC,EAAD,CAAON,MCTM,CACb,CACEI,GAAI,EACJV,KAAM,iBACNE,MAAO,qBAET,CACEQ,GAAI,EACJV,KAAM,eACNE,MAAO,kBAET,CACEQ,GAAI,EACJV,KAAM,gCACNE,MAAO,qBAET,CACEQ,GAAI,EACJV,KAAM,eACNE,MAAO,mBAET,CACEQ,GAAI,EACJV,KAAM,iBACNE,MAAO,oBAET,CACEQ,GAAI,EACJV,KAAM,cACNE,MAAO,gBAET,CACEQ,GAAI,EACJV,KAAM,iBACNE,MAAO,kBAET,CACEQ,GAAI,EACJV,KAAM,cACNE,MAAO,kBAET,CACEQ,GAAI,EACJV,KAAM,kBACNE,MAAO,oBAET,CACEQ,GAAI,GACJV,KAAM,gBACNE,MAAO,mBAET,CACEQ,GAAI,GACJV,KAAM,eACNE,MAAO,gBAET,CACEQ,GAAI,GACJV,KAAM,cACNE,MAAO,kBAET,CACEQ,GAAI,GACJV,KAAM,gBACNE,MAAO,oBAET,CACEQ,GAAI,GACJV,KAAM,mBACNE,MAAO,qBAET,CACEQ,GAAI,GACJV,KAAM,cACNE,MAAO,iBAET,CACEQ,GAAI,GACJV,KAAM,aACNE,MAAO,iBAET,CACEQ,GAAI,GACJV,KAAM,aACNE,MAAO,kBAET,CACEQ,GAAI,GACJV,KAAM,eACNE,MAAO,kBAET,CACEQ,GAAI,GACJV,KAAM,eACNE,MAAO,kBAET,CACEQ,GAAI,GACJV,KAAM,oBACNE,MAAO,mBAET,CACEQ,GAAI,GACJV,KAAM,gBACNE,MAAO,mBAET,CACEQ,GAAI,GACJV,KAAM,mBACNE,MAAO,oBAET,CACEQ,GAAI,GACJV,KAAM,gBACNE,MAAO,mBAET,CACEQ,GAAI,GACJV,KAAM,cACNE,MAAO,mBAET,CACEQ,GAAI,GACJV,KAAM,cACNE,MAAO,oBAET,CACEQ,GAAI,GACJV,KAAM,gBACNE,MAAO,mBAET,CACEQ,GAAI,GACJV,KAAM,gBACNE,MAAO,oBAET,CACEQ,GAAI,GACJV,KAAM,aACNE,MAAO,kBAET,CACEQ,GAAI,GACJV,KAAM,gBACNE,MAAO,kBAET,CACEQ,GAAI,GACJV,KAAM,cACNE,MAAO,kBAET,CACEQ,GAAI,GACJV,KAAM,gBACNE,MAAO,mBAET,CACEQ,GAAI,GACJV,KAAM,oBACNE,MAAO,wBDrJTW,SAASC,eAAe,SHyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.accd201e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport './Card.css'\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className='card bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img src={ `https://robohash.org/${ this.props.name }?200x200` } alt=\"robot\"/>\r\n        <div className='card-info'>\r\n          <h2>{ this.props.name }</h2>\r\n          <p>{ this.props.email }</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction Cards(props) {\r\n  const cards = props.items.map(c => {\r\n    return <Card key={ c.id } name={ c.name } email={ c.email } />\r\n  });\r\nreturn <div>{ cards }</div>;\r\n};\r\n\r\nexport default Cards;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport Cards from './Cards';\nimport robots from './robots';\n\nReactDOM.render(\n  <Cards items={ robots } />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export default [\r\n  {\r\n    id: 1,\r\n    name: 'Claudine Pratt',\r\n    email: 'claudine@home.com'\r\n  },\r\n  {\r\n    id: 2,\r\n    name: 'Naomi Medina',\r\n    email: 'naomi@home.com'\r\n  },\r\n  {\r\n    id: 3,\r\n    name: 'Gilberto Clark GAZUUUUUUUUUUU',\r\n    email: 'gilberto@home.com'\r\n  },\r\n  {\r\n    id: 4,\r\n    name: 'Hester Burns',\r\n    email: 'hester@home.com'\r\n  },\r\n  {\r\n    id: 5,\r\n    name: 'Ulysses Tucker',\r\n    email: 'ulysses@home.com'\r\n  },\r\n  {\r\n    id: 6,\r\n    name: 'May Watkins',\r\n    email: 'may@home.com'\r\n  },\r\n  {\r\n    id: 7,\r\n    name: 'Odell Villegas',\r\n    email: 'odell@home.com'\r\n  },\r\n  {\r\n    id: 8,\r\n    name: 'Hosea Gibbs',\r\n    email: 'hosea@home.com'\r\n  },\r\n  {\r\n    id: 9,\r\n    name: 'Lindsey Delgado',\r\n    email: 'lindsay@home.com'\r\n  },\r\n  {\r\n    id: 10,\r\n    name: 'Lazaro Cannon',\r\n    email: 'lazaro@home.com'\r\n  },\r\n  {\r\n    id: 11,\r\n    name: 'Dee Lawrence',\r\n    email: 'dee@home.com'\r\n  },\r\n  {\r\n    id: 12,\r\n    name: 'Carey Hogan',\r\n    email: 'carey@home.com'\r\n  },\r\n  {\r\n    id: 13,\r\n    name: 'Belinda Glass',\r\n    email: 'belinda@home.com'\r\n  },\r\n  {\r\n    id: 14,\r\n    name: 'Catalina Webster',\r\n    email: 'catalina@home.com'\r\n  },\r\n  {\r\n    id: 15,\r\n    name: 'Hans Werner',\r\n    email: 'hans@home.com'\r\n  },\r\n  {\r\n    id: 16,\r\n    name: 'Noel Zhang',\r\n    email: 'noel@home.com'\r\n  },\r\n  {\r\n    id: 17,\r\n    name: 'Stacy Paul',\r\n    email: 'stacy@home.com'\r\n  },\r\n  {\r\n    id: 18,\r\n    name: 'Marco Newton',\r\n    email: 'marco@home.com'\r\n  },\r\n  {\r\n    id: 19,\r\n    name: 'Allan Finley',\r\n    email: 'allan@home.com'\r\n  },\r\n  {\r\n    id: 20,\r\n    name: 'Shawna Mclaughlin',\r\n    email: 'shawna@home.com'\r\n  },\r\n  {\r\n    id: 21,\r\n    name: 'Johnny Malone',\r\n    email: 'johnny@home.com'\r\n  },\r\n  {\r\n    id: 22,\r\n    name: 'Delores Crawford',\r\n    email: 'delores@home.com'\r\n  },\r\n  {\r\n    id: 23,\r\n    name: 'Shelly Ramsey',\r\n    email: 'shelly@home.com'\r\n  },\r\n  {\r\n    id: 24,\r\n    name: 'Nelson Holt',\r\n    email: 'nelson@home.com'\r\n  },\r\n  {\r\n    id: 25,\r\n    name: 'Jamison Key',\r\n    email: 'jamison@home.com'\r\n  },\r\n  {\r\n    id: 26,\r\n    name: 'Malcom Duarte',\r\n    email: 'malcom@home.com'\r\n  },\r\n  {\r\n    id: 27,\r\n    name: 'Herbert Simon',\r\n    email: 'heberts@home.com'\r\n  },\r\n  {\r\n    id: 28,\r\n    name: 'Mabel Good',\r\n    email: 'mabel@home.com'\r\n  },\r\n  {\r\n    id: 29,\r\n    name: 'Karin Osborne',\r\n    email: 'karin@home.com'\r\n  },\r\n  {\r\n    id: 30,\r\n    name: 'Billy Avery',\r\n    email: 'billy@home.com'\r\n  },\r\n  {\r\n    id: 31,\r\n    name: 'Rupert Hunter',\r\n    email: 'rupert@home.com'\r\n  },\r\n  {\r\n    id: 32,\r\n    name: 'Geoffrey Hamilton',\r\n    email: 'geoffrey@home.com'\r\n  }\r\n]"],"sourceRoot":""}